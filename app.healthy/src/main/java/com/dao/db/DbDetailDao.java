package com.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dao.entity.DbDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_DETAIL".
*/
public class DbDetailDao extends AbstractDao<DbDetail, Integer> {

    public static final String TABLENAME = "DB_DETAIL";

    /**
     * Properties of entity DbDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", true, "ID");
        public final static Property Count = new Property(1, Integer.class, "count", false, "COUNT");
        public final static Property Fcount = new Property(2, Integer.class, "fcount", false, "FCOUNT");
        public final static Property Loreclass = new Property(3, Integer.class, "loreclass", false, "LORECLASS");
        public final static Property Rcount = new Property(4, Integer.class, "rcount", false, "RCOUNT");
        public final static Property Img = new Property(5, String.class, "img", false, "IMG");
        public final static Property Time = new Property(6, Long.class, "time", false, "TIME");
        public final static Property Keywords = new Property(7, String.class, "keywords", false, "KEYWORDS");
        public final static Property Description = new Property(8, String.class, "description", false, "DESCRIPTION");
        public final static Property Message = new Property(9, String.class, "message", false, "MESSAGE");
        public final static Property Title = new Property(10, String.class, "title", false, "TITLE");
    };


    public DbDetailDao(DaoConfig config) {
        super(config);
    }
    
    public DbDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_DETAIL\" (" + //
                "\"ID\" INTEGER PRIMARY KEY UNIQUE ," + // 0: id
                "\"COUNT\" INTEGER," + // 1: count
                "\"FCOUNT\" INTEGER," + // 2: fcount
                "\"LORECLASS\" INTEGER," + // 3: loreclass
                "\"RCOUNT\" INTEGER," + // 4: rcount
                "\"IMG\" TEXT," + // 5: img
                "\"TIME\" INTEGER," + // 6: time
                "\"KEYWORDS\" TEXT," + // 7: keywords
                "\"DESCRIPTION\" TEXT," + // 8: description
                "\"MESSAGE\" TEXT," + // 9: message
                "\"TITLE\" TEXT);"); // 10: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_DETAIL\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DbDetail entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(2, count);
        }
 
        Integer fcount = entity.getFcount();
        if (fcount != null) {
            stmt.bindLong(3, fcount);
        }
 
        Integer loreclass = entity.getLoreclass();
        if (loreclass != null) {
            stmt.bindLong(4, loreclass);
        }
 
        Integer rcount = entity.getRcount();
        if (rcount != null) {
            stmt.bindLong(5, rcount);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(7, time);
        }
 
        String keywords = entity.getKeywords();
        if (keywords != null) {
            stmt.bindString(8, keywords);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(9, description);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(10, message);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(11, title);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DbDetail readEntity(Cursor cursor, int offset) {
        DbDetail entity = new DbDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // count
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // fcount
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // loreclass
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // rcount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // img
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // keywords
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // description
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // message
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // title
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DbDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setCount(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFcount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setLoreclass(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setRcount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setKeywords(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDescription(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMessage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTitle(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(DbDetail entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(DbDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
