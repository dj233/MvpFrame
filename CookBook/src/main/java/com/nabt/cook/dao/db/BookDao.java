package com.nabt.cook.dao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.nabt.cook.dao.entity.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, String> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Tags = new Property(2, String.class, "tags", false, "TAGS");
        public final static Property Imtro = new Property(3, String.class, "imtro", false, "IMTRO");
        public final static Property Ingredients = new Property(4, String.class, "ingredients", false, "INGREDIENTS");
        public final static Property Burden = new Property(5, String.class, "burden", false, "BURDEN");
        public final static Property Album = new Property(6, String.class, "album", false, "ALBUM");
    };

    private DaoSession daoSession;


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"TAGS\" TEXT," + // 2: tags
                "\"IMTRO\" TEXT," + // 3: imtro
                "\"INGREDIENTS\" TEXT," + // 4: ingredients
                "\"BURDEN\" TEXT," + // 5: burden
                "\"ALBUM\" TEXT);"); // 6: album
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(3, tags);
        }
 
        String imtro = entity.getImtro();
        if (imtro != null) {
            stmt.bindString(4, imtro);
        }
 
        String ingredients = entity.getIngredients();
        if (ingredients != null) {
            stmt.bindString(5, ingredients);
        }
 
        String burden = entity.getBurden();
        if (burden != null) {
            stmt.bindString(6, burden);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(7, album);
        }
    }

    @Override
    protected void attachEntity(Book entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tags
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imtro
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ingredients
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // burden
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // album
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTags(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImtro(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIngredients(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBurden(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAlbum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Book entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
