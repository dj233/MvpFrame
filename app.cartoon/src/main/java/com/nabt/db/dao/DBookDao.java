package com.nabt.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.nabt.db.bean.DBook;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBOOK".
*/
public class DBookDao extends AbstractDao<DBook, String> {

    public static final String TABLENAME = "DBOOK";

    /**
     * Properties of entity DBook.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", true, "NAME");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Area = new Property(2, String.class, "area", false, "AREA");
        public final static Property Des = new Property(3, String.class, "des", false, "DES");
        public final static Property Finish = new Property(4, Boolean.class, "finish", false, "FINISH");
        public final static Property LastUpdate = new Property(5, Integer.class, "lastUpdate", false, "LAST_UPDATE");
        public final static Property CoverImg = new Property(6, String.class, "coverImg", false, "COVER_IMG");
    };


    public DBookDao(DaoConfig config) {
        super(config);
    }
    
    public DBookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBOOK\" (" + //
                "\"NAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: name
                "\"TYPE\" TEXT," + // 1: type
                "\"AREA\" TEXT," + // 2: area
                "\"DES\" TEXT," + // 3: des
                "\"FINISH\" INTEGER," + // 4: finish
                "\"LAST_UPDATE\" INTEGER," + // 5: lastUpdate
                "\"COVER_IMG\" TEXT);"); // 6: coverImg
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBOOK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBook entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(3, area);
        }
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(4, des);
        }
 
        Boolean finish = entity.getFinish();
        if (finish != null) {
            stmt.bindLong(5, finish ? 1L: 0L);
        }
 
        Integer lastUpdate = entity.getLastUpdate();
        if (lastUpdate != null) {
            stmt.bindLong(6, lastUpdate);
        }
 
        String coverImg = entity.getCoverImg();
        if (coverImg != null) {
            stmt.bindString(7, coverImg);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBook readEntity(Cursor cursor, int offset) {
        DBook entity = new DBook( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // area
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // des
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // finish
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // lastUpdate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // coverImg
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBook entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setArea(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDes(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFinish(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setLastUpdate(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCoverImg(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DBook entity, long rowId) {
        return entity.getName();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DBook entity) {
        if(entity != null) {
            return entity.getName();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
